{"version":3,"sources":["page/Course.js","page/Food.js","page/Home.js","page/Area.js","store/slice/navOpen.js","style-utility/Inner.js","components/Header.js","App.js","serviceWorkerRegistration.js","store/store.js","index.js"],"names":["Course","Food","Home","Area","counterSlice","createSlice","name","initialState","isOpen","reducers","toggle","state","actions","Inner","padding","Hold","styled","header","props","isScroll","css","Logo","h1","GnbToggleBtn","button","Header","useState","window","scrollY","setIsScroll","useEffect","addEventListener","toggleGnb","useDispatch","to","viewBox","d","onClick","App","path","component","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","configureStore","reducer","navOpen","ReactDOM","render","store","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fec4edac.chunk.js","sourcesContent":["const Course = () => {\r\n  return <div>코스</div>;\r\n};\r\n\r\nexport default Course;\r\n","const Food = () => {\r\n  return <div>푸드</div>;\r\n};\r\n\r\nexport default Food;\r\n","const Home = () => {\r\n  return <div>홈</div>;\r\n};\r\n\r\nexport default Home;\r\n","const Area = () => {\r\n  return <div>관광지</div>;\r\n};\r\n\r\nexport default Area;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"navOpen\",\r\n  initialState: {\r\n    isOpen: false,\r\n  },\r\n  reducers: {\r\n    toggle: (state) => {\r\n      state.isOpen = !state.isOpen;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggle } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","const Inner = {\r\n  padding: \"0 var(--inner-padding)\",\r\n};\r\n\r\nexport default Inner;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { toggle } from \"../store/slice/navOpen\";\r\nimport Inner from \"../style-utility/Inner\";\r\n\r\nconst Hold = styled.header`\r\n  ${Inner}\r\n  width: 100%;\r\n  height: 4.8rem;\r\n  border-bottom: 1px solid var(--depth-200);\r\n  background-color: var(--depth-100);\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 100;\r\n  transition: box-shadow 100ms ease-out;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  ${(props) => {\r\n    return (\r\n      props.isScroll &&\r\n      css`\r\n        box-shadow: 0 -0.1rem 3rem var(--depth-200);\r\n        border-bottom-color: transparent;\r\n      `\r\n    );\r\n  }}\r\n`;\r\nconst Logo = styled.h1`\r\n  position: absolute;\r\n  width: 3.5rem;\r\n  height: 3.5rem;\r\n  left: calc(50% - 1.75rem);\r\n  a {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    svg {\r\n      fill: var(--theme-500);\r\n    }\r\n  }\r\n`;\r\nconst GnbToggleBtn = styled.button`\r\n  width: 3.5rem;\r\n  height: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  span {\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: var(--text-900);\r\n  }\r\n`;\r\n\r\nconst Header = () => {\r\n  const [isScroll, setIsScroll] = useState(window.scrollY > 0);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      setIsScroll(window.scrollY > 0);\r\n    });\r\n  });\r\n  const toggleGnb = useDispatch();\r\n\r\n  return (\r\n    <Hold isScroll={isScroll}>\r\n      <Logo>\r\n        <Link to=\"/\">\r\n          <svg viewBox=\"0 0 512 512\">\r\n            <path d=\"M429.61,288,365.32,180H294.39l26.19,44H283.5V96h-64v5.56a95.84,95.84,0,0,0-99.77,158.21A95.34,95.34,0,0,0,187.5,288h32v32.77a32,32,0,0,1-54.62,21.85l-8.49-8.48L111.13,379.4l8.49,8.49A96.73,96.73,0,0,0,187.5,416a96.39,96.39,0,0,0,96-96V288ZM199.5,224h-12a32,32,0,1,1,32-32v32Z\" />\r\n          </svg>\r\n        </Link>\r\n      </Logo>\r\n      <GnbToggleBtn onClick={() => toggleGnb(toggle())}>\r\n        <span></span>\r\n        <span></span>\r\n      </GnbToggleBtn>\r\n    </Hold>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Route } from \"react-router\";\r\nimport Course from \"./page/Course\";\r\nimport Food from \"./page/Food\";\r\nimport Home from \"./page/Home\";\r\nimport Area from \"./page/Area\";\r\nimport Header from \"./components/Header\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <main>\r\n        <Route path=\"/\" component={Home} exact={true} />\r\n        <Route path=\"/course\" component={Course} />\r\n        <Route path=\"/food\" component={Food} />\r\n        <Route path=\"/area\" component={Area} />\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport navOpen from \"./slice/navOpen\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    navOpen: navOpen,\r\n  },\r\n});\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./common.scss\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}